---

- name: Kafka cluster | Initialize servers lists
  set_fact:
    zoo_servers: ""
    kafka_zoo_servers: ""

- name: Kafka cluster | Set required server lists
  set_fact:
    zoo_servers: "{{ zoo_servers + ' server.' + ( id | int + 1 ) | string + '=' + zoo_prefix + '-' + ( id | int + 1 ) | string  + ':' + zoo_ports.mgmt }}"
    kafka_zoo_servers: "{{ kafka_zoo_servers + ' ' + zoo_prefix + '-' + ( id | int + 1 ) | string + ':' + zoo_ports.client | string }}"
  loop: "{{ groups['kafka'] }}"
  loop_control:
    index_var: id

- name: Update etc/hosts file with correct entrance
  blockinfile:
    path: /etc/hosts
    block: |
      {% set kafka_hosts_name = [ kafka_prefix + '-' + (id | int + 1 ) | string, zoo_prefix + '-' + (id | int + 1 ) | string ] %}
      {% for host in kafka_hosts_name %}
      {{ ansible_default_ipv4['address'] }} {{ host + '.' + host_domain + ' '+ host if host_domain is defined else host }}
      {% endfor %}
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item }}"
  loop: "{{ groups['kafka'] }}"
  loop_control:
    index_var: id
  when: configure_etc_hosts

- name: Kafka cluster | Upload docker compose for kafka and zookeeper
  docker_service:
    project_name: "{{ kafka_prefix }}"
    definition:
      version: '2.1'
      services:
        zookeeper:
          image: zookeeper:{{ zoo_version }}
          container_name: "{{ zoo_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
          hostname: "{{ kafka_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
          restart: always
          network_mode: host
          environment:
            ZOO_MY_ID: "{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
            ZOO_PORT: "{{ zoo_ports.client }}"
            ZOO_SERVERS: "{{ zoo_servers }}"
        kafka:
          image: confluentinc/cp-kafka:{{ kafka_version }}
          container_name: "{{ kafka_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
          hostname: "{{ zoo_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
          restart: always
          network_mode: host
          environment:
            KAFKA_ADVERTISED_LISTENERS: >
              LISTENER_DOCKER_INTERNAL://{{ kafka_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}:{{ kafka_ports.server }}
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "{{ kafka_zoo_servers }}"
            KAFKA_BROKER_ID: "{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
            KAFKA_JMX_OPTS: >
              "-Dcom.sun.management.jmxremote
              -Dcom.sun.management.jmxremote.authenticate=false
              -Dcom.sun.management.jmxremote.ssl=false
              -Djava.rmi.server.hostname={{ kafka_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}
              -Dcom.sun.management.jmxremote.rmi.port={{ kafka_ports.jmx }}"
            JMX_PORT: "{{ kafka_ports.jmx }}"
          depends_on:
            - "zookeeper"

- name: Enable component monitoring
  block:
    - name: Kafka cluster | Create monitoring directory
      file:
        path: "{{ persistence_path }}/exporter"
        state: directory

    - name: Kafka cluster | Template configuration file for jmx-exporter config.yml
      template:
        src: config.yml.j2
        dest: "{{ persistence_path }}/exporter/config.yml"
        owner: nobody
        group: nobody
        mode: '0644'
      when: ansible_os_family == 'RedHat'

    - name: Kafka cluster | Template configuration file for jmx-exporter config.yml
      template:
        src: config.yml.j2
        dest: "{{ persistence_path }}/exporter/config.yml"
        owner: nobody
        group: nogroup
        mode: '0644'
      when: ansible_distribution == 'Ubuntu'

    - name: Kafka cluster | Upload docker compose for monitoring
      docker_service:
        project_name: "{{ kafka_prefix }}_exporter"
        definition:
          version: '2.1'
          services:
            exporter:
              image: danielqsj/kafka-exporter:{{ exporter_versions.kafka }}
              container_name: "{{ kafka_prefix }}-exporter-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
              restart: always
              command: "--kafka.server={{ kafka_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}:{{ kafka_ports.server }}"
              network_mode: host
            exporter-jmx:
              image: solsson/kafka-prometheus-jmx-exporter:{{ exporter_versions.jmx }}
              container_name: "{{ kafka_prefix }}-exporter-jmx-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
              restart: always
              command: "5556 /etc/jmx-kafka/config.yml"
              network_mode: host
              volumes:
                - "{{ persistence_path }}/exporter:/etc/jmx-kafka:ro"
            exporter-zoo:
              image: dabealu/zookeeper-exporter:{{ exporter_versions.zoo }}
              container_name: "{{ kafka_prefix }}-exporter-zoo-{{ groups['kafka'].index(inventory_hostname) | int + 1 }}"
              restart: always
              network_mode: host
              command: "--zk-host={{ zoo_prefix }}-{{ groups['kafka'].index(inventory_hostname) | int + 1 }} --timeout=30"
  when: kafka_monitoring_enabled
